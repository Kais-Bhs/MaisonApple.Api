// <auto-generated />
using System;
using DAO;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAO.Migrations
{
    [DbContext(typeof(MaisonAppleContext))]
    partial class MaisonAppleContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "IPHONE"
                        },
                        new
                        {
                            Id = 2,
                            Name = "MAC"
                        },
                        new
                        {
                            Id = 3,
                            Name = "AppleWATCH"
                        });
                });

            modelBuilder.Entity("Entities.Command", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.Property<int>("CommandStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Commands");
                });

            modelBuilder.Entity("Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsRead")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CommandId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommandId");

                    b.HasIndex("ProductId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CurrentPrice")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("InitialPrice")
                        .HasColumnType("int");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CurrentPrice = 1200,
                            Description = "Écran:\r\n\r\nSuper Retina XDR OLED\r\n6,1 pouces (diagonale)\r\nRésolution de 2532 x 1170 pixels (460 ppp)\r\nHDR\r\nTrue Tone\r\nGamme de couleurs étendue (P3)\r\nHaptic Touch\r\nContraste de 2 000 000:1 (standard)\r\nLuminosité maximale de 800 nits (standard) ; 1200 nits (HDR)\r\nRevêtement oléophobe résistant aux traces de doigts\r\nAppareil photo:\r\n\r\nDouble appareil photo arrière :\r\nGrand angle 12 Mpx : 26 mm, ouverture ƒ/1.5, stabilisation optique de l'image par déplacement du capteur, 100 % Focus Pixels\r\nUltra grand angle 12 Mpx : 13 mm, ouverture ƒ/2.4, champ de vision de 120°\r\nZoom optique arrière 2x ; zoom numérique jusqu'à 5x\r\nCaméra frontale TrueDepth 12 Mpx\r\nMode Cinématique pour la vidéo en 4K Dolby Vision jusqu'à 30 ips\r\nEnregistrement vidéo HDR 4K Dolby Vision jusqu'à 60 ips\r\nPerformances:\r\n\r\nPuce A15 Bionic\r\nBatterie:\r\n\r\nJusqu'à 19 heures de lecture vidéo\r\nJusqu'à 16 heures de lecture audio\r\nStockage:\r\n\r\n128 Go, 256 Go ou 512 Go\r\nAutres:\r\n\r\niOS 16\r\n5G\r\nWi-Fi 6 (802.11ax)\r\nBluetooth 5.3\r\nFace ID\r\nLightning\r\nCertifié IP68",
                            InitialPrice = 1200,
                            IsUsed = false,
                            Name = "iPhone 11",
                            StockQuantity = 10
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CurrentPrice = 1500,
                            Description = "Écran:\r\n\r\nSuper Retina XDR OLED\r\n6,1 pouces (diagonale)\r\nRésolution de 2532 x 1170 pixels (460 ppp)\r\nHDR\r\nTrue Tone\r\nGamme de couleurs étendue (P3)\r\nHaptic Touch\r\nContraste de 2 000 000:1 (standard)\r\nLuminosité maximale de 800 nits (standard) ; 1200 nits (HDR)\r\nRevêtement oléophobe résistant aux traces de doigts\r\nAppareil photo:\r\n\r\nDouble appareil photo arrière :\r\nGrand angle 12 Mpx : 26 mm, ouverture ƒ/1.5, stabilisation optique de l'image par déplacement du capteur, 100 % Focus Pixels\r\nUltra grand angle 12 Mpx : 13 mm, ouverture ƒ/2.4, champ de vision de 120°\r\nZoom optique arrière 2x ; zoom numérique jusqu'à 5x\r\nCaméra frontale TrueDepth 12 Mpx\r\nMode Cinématique pour la vidéo en 4K Dolby Vision jusqu'à 30 ips\r\nEnregistrement vidéo HDR 4K Dolby Vision jusqu'à 60 ips\r\nPerformances:\r\n\r\nPuce A15 Bionic\r\nBatterie:\r\n\r\nJusqu'à 19 heures de lecture vidéo\r\nJusqu'à 16 heures de lecture audio\r\nStockage:\r\n\r\n128 Go, 256 Go ou 512 Go\r\nAutres:\r\n\r\niOS 16\r\n5G\r\nWi-Fi 6 (802.11ax)\r\nBluetooth 5.3\r\nFace ID\r\nLightning\r\nCertifié IP68",
                            InitialPrice = 1500,
                            IsUsed = false,
                            Name = "iPhone 12",
                            StockQuantity = 10
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            CurrentPrice = 1800,
                            Description = "Écran:\r\n\r\nSuper Retina XDR OLED\r\n6,1 pouces (diagonale)\r\nRésolution de 2532 x 1170 pixels (460 ppp)\r\nHDR\r\nTrue Tone\r\nGamme de couleurs étendue (P3)\r\nHaptic Touch\r\nContraste de 2 000 000:1 (standard)\r\nLuminosité maximale de 800 nits (standard) ; 1200 nits (HDR)\r\nRevêtement oléophobe résistant aux traces de doigts\r\nAppareil photo:\r\n\r\nDouble appareil photo arrière :\r\nGrand angle 12 Mpx : 26 mm, ouverture ƒ/1.5, stabilisation optique de l'image par déplacement du capteur, 100 % Focus Pixels\r\nUltra grand angle 12 Mpx : 13 mm, ouverture ƒ/2.4, champ de vision de 120°\r\nZoom optique arrière 2x ; zoom numérique jusqu'à 5x\r\nCaméra frontale TrueDepth 12 Mpx\r\nMode Cinématique pour la vidéo en 4K Dolby Vision jusqu'à 30 ips\r\nEnregistrement vidéo HDR 4K Dolby Vision jusqu'à 60 ips\r\nPerformances:\r\n\r\nPuce A15 Bionic\r\nBatterie:\r\n\r\nJusqu'à 19 heures de lecture vidéo\r\nJusqu'à 16 heures de lecture audio\r\nStockage:\r\n\r\n128 Go, 256 Go ou 512 Go\r\nAutres:\r\n\r\niOS 16\r\n5G\r\nWi-Fi 6 (802.11ax)\r\nBluetooth 5.3\r\nFace ID\r\nLightning\r\nCertifié IP68",
                            InitialPrice = 1800,
                            IsUsed = false,
                            Name = "iPhone 13",
                            StockQuantity = 10
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            CurrentPrice = 2200,
                            Description = "Écran:\r\n\r\nSuper Retina XDR OLED\r\n6,1 pouces (diagonale)\r\nRésolution de 2532 x 1170 pixels (460 ppp)\r\nHDR\r\nTrue Tone\r\nGamme de couleurs étendue (P3)\r\nHaptic Touch\r\nContraste de 2 000 000:1 (standard)\r\nLuminosité maximale de 800 nits (standard) ; 1200 nits (HDR)\r\nRevêtement oléophobe résistant aux traces de doigts\r\nAppareil photo:\r\n\r\nDouble appareil photo arrière :\r\nGrand angle 12 Mpx : 26 mm, ouverture ƒ/1.5, stabilisation optique de l'image par déplacement du capteur, 100 % Focus Pixels\r\nUltra grand angle 12 Mpx : 13 mm, ouverture ƒ/2.4, champ de vision de 120°\r\nZoom optique arrière 2x ; zoom numérique jusqu'à 5x\r\nCaméra frontale TrueDepth 12 Mpx\r\nMode Cinématique pour la vidéo en 4K Dolby Vision jusqu'à 30 ips\r\nEnregistrement vidéo HDR 4K Dolby Vision jusqu'à 60 ips\r\nPerformances:\r\n\r\nPuce A15 Bionic\r\nBatterie:\r\n\r\nJusqu'à 19 heures de lecture vidéo\r\nJusqu'à 16 heures de lecture audio\r\nStockage:\r\n\r\n128 Go, 256 Go ou 512 Go\r\nAutres:\r\n\r\niOS 16\r\n5G\r\nWi-Fi 6 (802.11ax)\r\nBluetooth 5.3\r\nFace ID\r\nLightning\r\nCertifié IP68",
                            InitialPrice = 2200,
                            IsUsed = false,
                            Name = "iPhone 13 Pro Max",
                            StockQuantity = 10
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            CurrentPrice = 2800,
                            Description = "Écran:\r\n\r\nSuper Retina XDR OLED\r\n6,1 pouces (diagonale)\r\nRésolution de 2532 x 1170 pixels (460 ppp)\r\nHDR\r\nTrue Tone\r\nGamme de couleurs étendue (P3)\r\nHaptic Touch\r\nContraste de 2 000 000:1 (standard)\r\nLuminosité maximale de 800 nits (standard) ; 1200 nits (HDR)\r\nRevêtement oléophobe résistant aux traces de doigts\r\nAppareil photo:\r\n\r\nDouble appareil photo arrière :\r\nGrand angle 12 Mpx : 26 mm, ouverture ƒ/1.5, stabilisation optique de l'image par déplacement du capteur, 100 % Focus Pixels\r\nUltra grand angle 12 Mpx : 13 mm, ouverture ƒ/2.4, champ de vision de 120°\r\nZoom optique arrière 2x ; zoom numérique jusqu'à 5x\r\nCaméra frontale TrueDepth 12 Mpx\r\nMode Cinématique pour la vidéo en 4K Dolby Vision jusqu'à 30 ips\r\nEnregistrement vidéo HDR 4K Dolby Vision jusqu'à 60 ips\r\nPerformances:\r\n\r\nPuce A15 Bionic\r\nBatterie:\r\n\r\nJusqu'à 19 heures de lecture vidéo\r\nJusqu'à 16 heures de lecture audio\r\nStockage:\r\n\r\n128 Go, 256 Go ou 512 Go\r\nAutres:\r\n\r\niOS 16\r\n5G\r\nWi-Fi 6 (802.11ax)\r\nBluetooth 5.3\r\nFace ID\r\nLightning\r\nCertifié IP68",
                            InitialPrice = 2800,
                            IsUsed = false,
                            Name = "iPhone 15",
                            StockQuantity = 10
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            CurrentPrice = 3000,
                            Description = "Écran:\r\n\r\nSuper Retina XDR OLED\r\n6,1 pouces (diagonale)\r\nRésolution de 2532 x 1170 pixels (460 ppp)\r\nHDR\r\nTrue Tone\r\nGamme de couleurs étendue (P3)\r\nHaptic Touch\r\nContraste de 2 000 000:1 (standard)\r\nLuminosité maximale de 800 nits (standard) ; 1200 nits (HDR)\r\nRevêtement oléophobe résistant aux traces de doigts\r\nAppareil photo:\r\n\r\nDouble appareil photo arrière :\r\nGrand angle 12 Mpx : 26 mm, ouverture ƒ/1.5, stabilisation optique de l'image par déplacement du capteur, 100 % Focus Pixels\r\nUltra grand angle 12 Mpx : 13 mm, ouverture ƒ/2.4, champ de vision de 120°\r\nZoom optique arrière 2x ; zoom numérique jusqu'à 5x\r\nCaméra frontale TrueDepth 12 Mpx\r\nMode Cinématique pour la vidéo en 4K Dolby Vision jusqu'à 30 ips\r\nEnregistrement vidéo HDR 4K Dolby Vision jusqu'à 60 ips\r\nPerformances:\r\n\r\nPuce A15 Bionic\r\nBatterie:\r\n\r\nJusqu'à 19 heures de lecture vidéo\r\nJusqu'à 16 heures de lecture audio\r\nStockage:\r\n\r\n128 Go, 256 Go ou 512 Go\r\nAutres:\r\n\r\niOS 16\r\n5G\r\nWi-Fi 6 (802.11ax)\r\nBluetooth 5.3\r\nFace ID\r\nLightning\r\nCertifié IP68",
                            InitialPrice = 3000,
                            IsUsed = false,
                            Name = "Mac Pro 2022",
                            StockQuantity = 10
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            CurrentPrice = 2500,
                            Description = "Écran:\r\n\r\nSuper Retina XDR OLED\r\n6,1 pouces (diagonale)\r\nRésolution de 2532 x 1170 pixels (460 ppp)\r\nHDR\r\nTrue Tone\r\nGamme de couleurs étendue (P3)\r\nHaptic Touch\r\nContraste de 2 000 000:1 (standard)\r\nLuminosité maximale de 800 nits (standard) ; 1200 nits (HDR)\r\nRevêtement oléophobe résistant aux traces de doigts\r\nAppareil photo:\r\n\r\nDouble appareil photo arrière :\r\nGrand angle 12 Mpx : 26 mm, ouverture ƒ/1.5, stabilisation optique de l'image par déplacement du capteur, 100 % Focus Pixels\r\nUltra grand angle 12 Mpx : 13 mm, ouverture ƒ/2.4, champ de vision de 120°\r\nZoom optique arrière 2x ; zoom numérique jusqu'à 5x\r\nCaméra frontale TrueDepth 12 Mpx\r\nMode Cinématique pour la vidéo en 4K Dolby Vision jusqu'à 30 ips\r\nEnregistrement vidéo HDR 4K Dolby Vision jusqu'à 60 ips\r\nPerformances:\r\n\r\nPuce A15 Bionic\r\nBatterie:\r\n\r\nJusqu'à 19 heures de lecture vidéo\r\nJusqu'à 16 heures de lecture audio\r\nStockage:\r\n\r\n128 Go, 256 Go ou 512 Go\r\nAutres:\r\n\r\niOS 16\r\n5G\r\nWi-Fi 6 (802.11ax)\r\nBluetooth 5.3\r\nFace ID\r\nLightning\r\nCertifié IP68",
                            InitialPrice = 2500,
                            IsUsed = false,
                            Name = "Mac Pro 2021",
                            StockQuantity = 10
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 2,
                            CurrentPrice = 2000,
                            Description = "Écran:\r\n\r\nSuper Retina XDR OLED\r\n6,1 pouces (diagonale)\r\nRésolution de 2532 x 1170 pixels (460 ppp)\r\nHDR\r\nTrue Tone\r\nGamme de couleurs étendue (P3)\r\nHaptic Touch\r\nContraste de 2 000 000:1 (standard)\r\nLuminosité maximale de 800 nits (standard) ; 1200 nits (HDR)\r\nRevêtement oléophobe résistant aux traces de doigts\r\nAppareil photo:\r\n\r\nDouble appareil photo arrière :\r\nGrand angle 12 Mpx : 26 mm, ouverture ƒ/1.5, stabilisation optique de l'image par déplacement du capteur, 100 % Focus Pixels\r\nUltra grand angle 12 Mpx : 13 mm, ouverture ƒ/2.4, champ de vision de 120°\r\nZoom optique arrière 2x ; zoom numérique jusqu'à 5x\r\nCaméra frontale TrueDepth 12 Mpx\r\nMode Cinématique pour la vidéo en 4K Dolby Vision jusqu'à 30 ips\r\nEnregistrement vidéo HDR 4K Dolby Vision jusqu'à 60 ips\r\nPerformances:\r\n\r\nPuce A15 Bionic\r\nBatterie:\r\n\r\nJusqu'à 19 heures de lecture vidéo\r\nJusqu'à 16 heures de lecture audio\r\nStockage:\r\n\r\n128 Go, 256 Go ou 512 Go\r\nAutres:\r\n\r\niOS 16\r\n5G\r\nWi-Fi 6 (802.11ax)\r\nBluetooth 5.3\r\nFace ID\r\nLightning\r\nCertifié IP68",
                            InitialPrice = 2000,
                            IsUsed = false,
                            Name = "Mac Pro 2020",
                            StockQuantity = 10
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 3,
                            CurrentPrice = 400,
                            Description = "Écran:\r\n\r\nSuper Retina XDR OLED\r\n6,1 pouces (diagonale)\r\nRésolution de 2532 x 1170 pixels (460 ppp)\r\nHDR\r\nTrue Tone\r\nGamme de couleurs étendue (P3)\r\nHaptic Touch\r\nContraste de 2 000 000:1 (standard)\r\nLuminosité maximale de 800 nits (standard) ; 1200 nits (HDR)\r\nRevêtement oléophobe résistant aux traces de doigts\r\nAppareil photo:\r\n\r\nDouble appareil photo arrière :\r\nGrand angle 12 Mpx : 26 mm, ouverture ƒ/1.5, stabilisation optique de l'image par déplacement du capteur, 100 % Focus Pixels\r\nUltra grand angle 12 Mpx : 13 mm, ouverture ƒ/2.4, champ de vision de 120°\r\nZoom optique arrière 2x ; zoom numérique jusqu'à 5x\r\nCaméra frontale TrueDepth 12 Mpx\r\nMode Cinématique pour la vidéo en 4K Dolby Vision jusqu'à 30 ips\r\nEnregistrement vidéo HDR 4K Dolby Vision jusqu'à 60 ips\r\nPerformances:\r\n\r\nPuce A15 Bionic\r\nBatterie:\r\n\r\nJusqu'à 19 heures de lecture vidéo\r\nJusqu'à 16 heures de lecture audio\r\nStockage:\r\n\r\n128 Go, 256 Go ou 512 Go\r\nAutres:\r\n\r\niOS 16\r\n5G\r\nWi-Fi 6 (802.11ax)\r\nBluetooth 5.3\r\nFace ID\r\nLightning\r\nCertifié IP68",
                            InitialPrice = 400,
                            IsUsed = false,
                            Name = "Apple Watch Series 7",
                            StockQuantity = 10
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 3,
                            CurrentPrice = 300,
                            Description = "Écran:\r\n\r\nSuper Retina XDR OLED\r\n6,1 pouces (diagonale)\r\nRésolution de 2532 x 1170 pixels (460 ppp)\r\nHDR\r\nTrue Tone\r\nGamme de couleurs étendue (P3)\r\nHaptic Touch\r\nContraste de 2 000 000:1 (standard)\r\nLuminosité maximale de 800 nits (standard) ; 1200 nits (HDR)\r\nRevêtement oléophobe résistant aux traces de doigts\r\nAppareil photo:\r\n\r\nDouble appareil photo arrière :\r\nGrand angle 12 Mpx : 26 mm, ouverture ƒ/1.5, stabilisation optique de l'image par déplacement du capteur, 100 % Focus Pixels\r\nUltra grand angle 12 Mpx : 13 mm, ouverture ƒ/2.4, champ de vision de 120°\r\nZoom optique arrière 2x ; zoom numérique jusqu'à 5x\r\nCaméra frontale TrueDepth 12 Mpx\r\nMode Cinématique pour la vidéo en 4K Dolby Vision jusqu'à 30 ips\r\nEnregistrement vidéo HDR 4K Dolby Vision jusqu'à 60 ips\r\nPerformances:\r\n\r\nPuce A15 Bionic\r\nBatterie:\r\n\r\nJusqu'à 19 heures de lecture vidéo\r\nJusqu'à 16 heures de lecture audio\r\nStockage:\r\n\r\n128 Go, 256 Go ou 512 Go\r\nAutres:\r\n\r\niOS 16\r\n5G\r\nWi-Fi 6 (802.11ax)\r\nBluetooth 5.3\r\nFace ID\r\nLightning\r\nCertifié IP68",
                            InitialPrice = 300,
                            IsUsed = false,
                            Name = "Apple Watch SE",
                            StockQuantity = 10
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 3,
                            CurrentPrice = 200,
                            Description = "Écran:\r\n\r\nSuper Retina XDR OLED\r\n6,1 pouces (diagonale)\r\nRésolution de 2532 x 1170 pixels (460 ppp)\r\nHDR\r\nTrue Tone\r\nGamme de couleurs étendue (P3)\r\nHaptic Touch\r\nContraste de 2 000 000:1 (standard)\r\nLuminosité maximale de 800 nits (standard) ; 1200 nits (HDR)\r\nRevêtement oléophobe résistant aux traces de doigts\r\nAppareil photo:\r\n\r\nDouble appareil photo arrière :\r\nGrand angle 12 Mpx : 26 mm, ouverture ƒ/1.5, stabilisation optique de l'image par déplacement du capteur, 100 % Focus Pixels\r\nUltra grand angle 12 Mpx : 13 mm, ouverture ƒ/2.4, champ de vision de 120°\r\nZoom optique arrière 2x ; zoom numérique jusqu'à 5x\r\nCaméra frontale TrueDepth 12 Mpx\r\nMode Cinématique pour la vidéo en 4K Dolby Vision jusqu'à 30 ips\r\nEnregistrement vidéo HDR 4K Dolby Vision jusqu'à 60 ips\r\nPerformances:\r\n\r\nPuce A15 Bionic\r\nBatterie:\r\n\r\nJusqu'à 19 heures de lecture vidéo\r\nJusqu'à 16 heures de lecture audio\r\nStockage:\r\n\r\n128 Go, 256 Go ou 512 Go\r\nAutres:\r\n\r\niOS 16\r\n5G\r\nWi-Fi 6 (802.11ax)\r\nBluetooth 5.3\r\nFace ID\r\nLightning\r\nCertifié IP68",
                            InitialPrice = 200,
                            IsUsed = false,
                            Name = "Apple Watch Series 3",
                            StockQuantity = 10
                        });
                });

            modelBuilder.Entity("Entities.ProductColor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ColorCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ProductColors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ColorCode = "#FF0000",
                            Name = "Red"
                        },
                        new
                        {
                            Id = 2,
                            ColorCode = "#007AFF",
                            Name = "Blue"
                        },
                        new
                        {
                            Id = 3,
                            ColorCode = "#34C759",
                            Name = "Green"
                        },
                        new
                        {
                            Id = 4,
                            ColorCode = "#000000",
                            Name = "Black"
                        },
                        new
                        {
                            Id = 5,
                            ColorCode = "#FFCC00",
                            Name = "Yellow"
                        },
                        new
                        {
                            Id = 6,
                            ColorCode = "#FFD700",
                            Name = "Gold"
                        },
                        new
                        {
                            Id = 7,
                            ColorCode = "#AF52DE",
                            Name = "Purple"
                        },
                        new
                        {
                            Id = 8,
                            ColorCode = "#8E8E93",
                            Name = "Grey"
                        });
                });

            modelBuilder.Entity("Entities.ProductColorRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("ProductId", "ColorId")
                        .IsUnique();

                    b.ToTable("ProductColorRelations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ColorId = 1,
                            ProductId = 1
                        },
                        new
                        {
                            Id = 2,
                            ColorId = 2,
                            ProductId = 1
                        },
                        new
                        {
                            Id = 3,
                            ColorId = 3,
                            ProductId = 1
                        },
                        new
                        {
                            Id = 4,
                            ColorId = 1,
                            ProductId = 2
                        },
                        new
                        {
                            Id = 5,
                            ColorId = 2,
                            ProductId = 2
                        },
                        new
                        {
                            Id = 6,
                            ColorId = 1,
                            ProductId = 3
                        },
                        new
                        {
                            Id = 7,
                            ColorId = 3,
                            ProductId = 3
                        },
                        new
                        {
                            Id = 8,
                            ColorId = 2,
                            ProductId = 4
                        },
                        new
                        {
                            Id = 9,
                            ColorId = 4,
                            ProductId = 4
                        },
                        new
                        {
                            Id = 10,
                            ColorId = 1,
                            ProductId = 5
                        },
                        new
                        {
                            Id = 11,
                            ColorId = 5,
                            ProductId = 5
                        },
                        new
                        {
                            Id = 12,
                            ColorId = 1,
                            ProductId = 6
                        },
                        new
                        {
                            Id = 13,
                            ColorId = 3,
                            ProductId = 6
                        },
                        new
                        {
                            Id = 14,
                            ColorId = 2,
                            ProductId = 7
                        },
                        new
                        {
                            Id = 15,
                            ColorId = 4,
                            ProductId = 7
                        },
                        new
                        {
                            Id = 16,
                            ColorId = 1,
                            ProductId = 8
                        },
                        new
                        {
                            Id = 17,
                            ColorId = 5,
                            ProductId = 8
                        },
                        new
                        {
                            Id = 18,
                            ColorId = 2,
                            ProductId = 9
                        },
                        new
                        {
                            Id = 19,
                            ColorId = 3,
                            ProductId = 9
                        },
                        new
                        {
                            Id = 20,
                            ColorId = 1,
                            ProductId = 10
                        },
                        new
                        {
                            Id = 21,
                            ColorId = 4,
                            ProductId = 10
                        },
                        new
                        {
                            Id = 22,
                            ColorId = 2,
                            ProductId = 11
                        },
                        new
                        {
                            Id = 23,
                            ColorId = 5,
                            ProductId = 11
                        });
                });

            modelBuilder.Entity("Entities.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("longblob");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageUrl = "https://media.ldlc.com/r1600/ld/products/00/05/92/68/LD0005926880_1.jpg",
                            ProductId = 1
                        },
                        new
                        {
                            Id = 2,
                            ImageUrl = "https://m.media-amazon.com/images/I/510WkOj8FLL._AC_UF894,1000_QL80_.jpg",
                            ProductId = 2
                        },
                        new
                        {
                            Id = 3,
                            ImageUrl = "https://mk-media.mytek.tn/media/catalog/product/cache/8be3f98b14227a82112b46963246dfe1/i/p/iph-13-128-sl_2.jpg",
                            ProductId = 3
                        },
                        new
                        {
                            Id = 4,
                            ImageUrl = "https://www.apple.com/newsroom/images/product/iphone/geo/Apple_iPhone-13-Pro_iPhone-13-Pro-Max_GEO_09142021_inline.jpg.large.jpg",
                            ProductId = 4
                        },
                        new
                        {
                            Id = 5,
                            ImageUrl = "https://www.apple.com/newsroom/images/product/iphone/geo/Apple_iPhone-13-Pro_iPhone-13-Pro-Max_GEO_09142021_inline.jpg.large.jpg",
                            ProductId = 5
                        },
                        new
                        {
                            Id = 6,
                            ImageUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSZokHFYzzt5CenynhMyHQdkcHbz-015EIStA&s",
                            ProductId = 6
                        },
                        new
                        {
                            Id = 7,
                            ImageUrl = "https://www.cnet.com/a/img/resize/483f6629791616f58f3a205df4d52e40b8cba429/hub/2024/03/06/725a8e72-aa72-439a-9357-af161b30f3c9/apple-macbook-air-m3-2024-14.jpg?auto=webp&fit=crop&height=1200&width=1200",
                            ProductId = 7
                        },
                        new
                        {
                            Id = 8,
                            ImageUrl = "https://media.wired.com/photos/643d7e61cdba28f045ac3f59/master/pass/macbook_sec_GettyImages-1368668740.jpg",
                            ProductId = 8
                        },
                        new
                        {
                            Id = 9,
                            ImageUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcS1Vd_ryVhLC8nBtyZbgQ03y2_BFIrW1zcfFg&s",
                            ProductId = 9
                        },
                        new
                        {
                            Id = 10,
                            ImageUrl = "https://www.apple.com/newsroom/images/product/watch/standard/Apple_watch-series7_hero_09142021_big.jpg.slideshow-medium_2x.jpg",
                            ProductId = 10
                        },
                        new
                        {
                            Id = 11,
                            ImageUrl = "https://www.apple.com/newsroom/images/2023/09/apple-unveils-apple-watch-ultra-2/tile/Apple-Watch-Ultra-2-hero-230912.jpg.og.jpg?202405161951",
                            ProductId = 11
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "ADMIN",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "USER",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("Entities.Command", b =>
                {
                    b.HasOne("Entities.User", "User")
                        .WithMany("payments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Notification", b =>
                {
                    b.HasOne("Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Order", b =>
                {
                    b.HasOne("Entities.Command", "Payment")
                        .WithMany("Orders")
                        .HasForeignKey("CommandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Product", "Product")
                        .WithMany("Orders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Entities.Product", b =>
                {
                    b.HasOne("Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Entities.ProductColorRelation", b =>
                {
                    b.HasOne("Entities.ProductColor", "ProductColor")
                        .WithMany("ProductColorRelations")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Product", "Product")
                        .WithMany("ProductColorRelations")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductColor");
                });

            modelBuilder.Entity("Entities.ProductImage", b =>
                {
                    b.HasOne("Entities.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Entities.Command", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Entities.Product", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Orders");

                    b.Navigation("ProductColorRelations");
                });

            modelBuilder.Entity("Entities.ProductColor", b =>
                {
                    b.Navigation("ProductColorRelations");
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("payments");
                });
#pragma warning restore 612, 618
        }
    }
}
